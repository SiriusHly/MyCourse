//接收文本信息
                    BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    String data = in.readLine();
                    System.err.println("the client msg is :"+ data);

                    //接收二进制字节流
                    DataInputStream dis = new DataInputStream(new BufferedInputStream(socket.getInputStream()));
                    byte [] bytes = new byte[dis.available()];
                    dis.read(bytes);

                    //接收对象信息
                    ObjectInput ois = new ObjectInputStream(new BufferedInputStream(socket.getInputStream()));
                    try {
                        Object object = ois.readObject();
                    } catch (ClassNotFoundException e) {
                        e.printStackTrace();
                    }

                    //输出文本
                    PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())),true);
                    out.println(new Date().toInstant()+":"+data);
                    out.close();

                    //输出二进制
                    DataOutputStream dataOutputStream = new DataOutputStream(socket.getOutputStream());
                    byte[] bytes1 = "hly".getBytes();
                    dataOutputStream.write(bytes1);

                    //输出对象
                    ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
                    oos.writeObject(new Date());
                    oos.close();





//next()和nextLine()的区别详解

/*next()方法在读取内容时，对输入有效字符之前遇到的空格键、Tab键或Enter键等结束符，next()方法会自动将其过滤掉；只有在读取到有效字符之后，next()方法才将其后的空格键、Tab键或Enter键等视为结束符；所以next()方法不能得到带空格的字符串。
 */

/*nextLine()方法字面上有扫描一整行的意思，它的结束符只能是Enter键，即nextLine()方法返回的是Enter键之前没有被读取的所有字符，它是可以得到带空格的字符串的。
